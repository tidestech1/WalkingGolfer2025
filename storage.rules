rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      // Now checks the admin custom claim in the ID token
      return isAuthenticated() && request.auth.token.admin == true;
    }
    
    function isValidImage() {
      return request.resource.contentType.matches('image/.*') &&
             request.resource.size < 5 * 1024 * 1024; // 5MB max
    }
    
    function isValidPath(pathSegment) {
      // Path segments should not contain slashes
      return pathSegment.matches('^[a-zA-Z0-9-_.]+$') && !pathSegment.matches('.*/.*');
    }

    // News article images
    match /news/{imageId} {
      allow read: if true; // Anyone can view news images
      allow write: if isAdmin() && isValidImage() && isValidPath(imageId);
      allow delete: if isAdmin();
    }

    // Course images
    match /courses/{courseId}/{imageId} {
      allow read: if true; // Anyone can view course images
      allow write: if isAdmin() && isValidImage() && isValidPath(courseId) && isValidPath(imageId);
      allow delete: if isAdmin();
    }

    // User profile images
    match /profiles/{userId}/{imageId} {
      allow read: if true; // Anyone can view profile images
      allow write: if isAuthenticated() && 
                   request.auth.uid == userId && 
                   isValidImage() && 
                   isValidPath(imageId); // userId is implicitly validated by request.auth.uid
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Review images
    // Path: reviews/{courseId}/{userId}/{filename}
    match /reviews/{courseId}/{userId}/{filename} {
      allow read: if true; // Or restrict as needed, e.g., if isAuthenticated();
      allow write: if isAuthenticated() && 
                   request.auth.uid == userId && 
                   isValidImage() &&
                   isValidPath(courseId); // courseId should be a valid path segment
                   // userId is validated by matching request.auth.uid, no need for isValidPath
                   // This allows for Google/Facebook UIDs that contain colons and other characters
                   // filename itself is generated and can contain various characters, so not checking with isValidPath
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Default deny: IMPORTANT - This should be the last rule in this block
    // if it's intended to catch all unmatched paths.
    // However, specific matches are usually preferred over a global {allPaths=**}
    // if you want to ensure only defined paths are accessible.
    // If your intention is to deny everything not explicitly allowed by the rules above,
    // then this is correct.
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
} 